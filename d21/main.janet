(defn arrow-path [from to]
  (let [paths
        {"7" {"7" [] "8" [">"] "9" [">" ">"]
              "4" ["v"] "5" ["v" ">"] "6" ["v" ">" ">"]
              "1" ["v" "v"] "2" ["v" "v" ">"] "3" ["v" "v" ">" ">"]
              "0" [">" "v" "v" "v"] "A" [">" ">" "v" "v" "v"]}

         "8" {"7" ["<"] "8" [] "9" [">"]
              "4" ["<" "v"] "5" ["v"] "6" ["v" ">"]
              "1" ["<" "v" "v"] "2" ["v" "v"] "3" ["v" "v" ">"]
              "0" ["v" "v" "v"] "A" ["v" "v" "v" ">"]}

         "9" {"7" ["<" "<"] "8" ["<"] "9" []
              "4" ["<" "<" "v"] "5" ["<" "v"] "6" ["v"]
              "1" ["<" "<" "v" "v"] "2" ["<" "v" "v"] "3" ["v" "v"]
              "0" ["<" "v" "v" "v"] "A" ["v" "v" "v"]}

         "4" {"7" ["^"] "8" ["^" ">"] "9" ["^" ">" ">"]
              "4" [] "5" [">"] "6" [">" ">"]
              "1" ["v"] "2" ["v" ">"] "3" ["v" ">" ">"]
              "0" [">" "v" "v"] "A" [">" ">" "v" "v"]}

         "5" {"7" ["<" "^"] "8" ["^"] "9" ["^" ">"]
              "4" ["<"] "5" [] "6" [">"]
              "1" ["<" "v"] "2" ["v"] "3" ["v" ">"]
              "0" ["v" "v"] "A" ["v" "v" ">"]}

         "6" {"7" ["<" "<" "^"] "8" ["<" "^"] "9" ["^"]
              "4" ["<" "<"] "5" ["<"] "6" []
              "1" ["<" "<" "v"] "2" ["<" "v"] "3" ["v"]
              "0" ["<" "v" "v"] "A" ["v" "v"]}

         "1" {"7" ["^" "^"] "8" ["^" "^" ">"] "9" ["^" "^" ">" ">"]
              "4" ["^"] "5" ["^" ">"] "6" ["^" ">" ">"]
              "1" [] "2" [">"] "3" [">" ">"]
              "0" [">" "v"] "A" [">" ">" "v"]}

         "2" {"7" ["<" "^" "^"] "8" ["^" "^"] "9" ["^" "^" ">"]
              "4" ["<" "^"] "5" ["^"] "6" ["^" ">"]
              "1" ["<"] "2" [] "3" [">"]
              "0" ["v"] "A" ["v" ">"]}

         "3" {"7" ["<" "<" "^" "^"] "8" ["<" "^" "^"] "9" ["^" "^"]
              "4" ["<" "<" "^"] "5" ["<" "^"] "6" ["^"]
              "1" ["<" "<"] "2" ["<"] "3" []
              "0" ["<" "v"] "A" ["v"]}

         "0" {"7" ["^" "^" "^" "<"] "8" ["^" "^" "^"] "9" ["^" "^" "^" ">"]
              "4" ["^" "^" "<"] "5" ["^" "^"] "6" ["^" "^" ">"]
              "1" ["^" "<"] "2" ["^"] "3" ["^" ">"]
              "0" [] "A" [">"]}

         "A" {"7" ["^" "^" "^" "<" "<"] "8" ["<" "^" "^" "^"] "9" ["^" "^" "^"]
              "4" ["^" "^" "<" "<"] "5" ["^" "^" "<"] "6" ["^" "^"]
              "1" ["^" "<" "<"] "2" ["^" "<"] "3" ["^"]
              "0" ["<"] "A" []}}]
    [;(get-in paths [from to]) "A"]))

(defn num-code-to-dir-code [code]
  (mapcat |(arrow-path ;$) (map tuple ["A" ;code] code)))

(defn num-path [from to]
  (let [paths
        {"A" {"A" [] "^" ["<"] ">" ["v"] "v" ["<" "v"] "<" ["v" "<" "<"]}
         "^" {"^" [] "A" [">"] ">" ["v" ">"] "v" ["v"] "<" ["v" "<"]}
         "<" {"<" [] "v" [">"] "^" [">" "^"] ">" [">" ">"] "A" [">" ">" "^"]}
         "v" {"v" [] "<" ["<"] ">" [">"] "^" ["^"] "A" ["^" ">"]}
         ">" {">" [] "A" ["^"] "^" ["<" "^"] "v" ["<"] "<" ["<" "<"]}}]
    [;(get-in paths [from to]) "A"]))

(defn numeric [code] (scan-number (string ;(drop -1 code))))

(def cache @{})

(defn compute [code depth]
  (let [k (string ;code depth)]
    (or (get cache k)
        (do
          (->> (seq [[a b] :in (map tuple ["A" ;code] code)
                     :let [path (num-path a b)]]
                 (if (= 0 depth)
                   (length path)
                   (compute path (dec depth))))
               sum
               (put cache k))
          (get cache k)))))

(defn solve [input]
  (let [codes (peg/match ~(split :s (group (some '1))) input)
        p1 (map |(* (numeric $) (compute (num-code-to-dir-code $) 1)) codes)
        p2 (map |(* (numeric $) (compute (num-code-to-dir-code $) 24)) codes)]
    [(sum p1) (sum p2)]))

(defn main [&] (->> (file/read stdin :all) solve pp))
