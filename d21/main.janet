(def parser (peg/compile ~(split :s (group (some '1)))))

(def best-num {[[1 1] [1 1]] [] [[1 1] [1 2]] [">"]
               [[1 1] [1 3]] [">" ">"] [[1 1] [2 1]] ["v"]
               [[1 1] [2 2]] ["v" ">"] [[1 1] [2 3]] ["v" ">" ">"]
               [[1 1] [3 1]] ["v" "v"] [[1 1] [3 2]] ["v" "v" ">"]
               [[1 1] [3 3]] ["v" "v" ">" ">"] [[1 1] [4 2]] [">" "v" "v" "v"]
               [[1 1] [4 3]] [">" ">" "v" "v" "v"]

               [[1 2] [1 1]] ["<"] [[1 2] [1 2]] []
               [[1 2] [1 3]] [">"] [[1 2] [2 1]] ["<" "v"]
               [[1 2] [2 2]] ["v"] [[1 2] [2 3]] ["v" ">"]
               [[1 2] [3 1]] ["<" "v" "v"] [[1 2] [3 2]] ["v" "v"]
               [[1 2] [3 3]] ["v" "v" ">"] [[1 2] [4 2]] ["v" "v" "v"]
               [[1 2] [4 3]] ["v" "v" "v" ">"]

               [[1 3] [1 1]] ["<" "<"] [[1 3] [1 2]] ["<"]
               [[1 3] [1 3]] [] [[1 3] [2 1]] ["<" "<" "v"]
               [[1 3] [2 2]] ["<" "v"] [[1 3] [2 3]] ["v"]
               [[1 3] [3 1]] ["<" "<" "v" "v"] [[1 3] [3 2]] ["<" "v" "v"]
               [[1 3] [3 3]] ["v" "v"] [[1 3] [4 2]] ["<" "v" "v" "v"]
               [[1 3] [4 3]] ["v" "v" "v"]

               [[2 1] [1 1]] ["^"] [[2 1] [1 2]] ["^" ">"]
               [[2 1] [1 3]] ["^" ">" ">"] [[2 1] [2 1]] []
               [[2 1] [2 2]] [">"] [[2 1] [2 3]] [">" ">"]
               [[2 1] [3 1]] ["v"] [[2 1] [3 2]] ["v" ">"]
               [[2 1] [3 3]] ["v" ">" ">"] [[2 1] [4 2]] [">" "v" "v"]
               [[2 1] [4 3]] [">" ">" "v" "v"]

               [[2 2] [1 1]] ["<" "^"] [[2 2] [1 2]] ["^"]
               [[2 2] [1 3]] ["^" ">"] [[2 2] [2 1]] ["<"]
               [[2 2] [2 2]] [] [[2 2] [2 3]] [">"]
               [[2 2] [3 1]] ["<" "v"] [[2 2] [3 2]] ["v"]
               [[2 2] [3 3]] ["v" ">"] [[2 2] [4 2]] ["v" "v"]
               [[2 2] [4 3]] ["v" "v" ">"]

               [[2 3] [1 1]] ["<" "<" "^"] [[2 3] [1 2]] ["<" "^"]
               [[2 3] [1 3]] ["^"] [[2 3] [2 1]] ["<" "<"]
               [[2 3] [2 2]] ["<"] [[2 3] [2 3]] []
               [[2 3] [3 1]] ["<" "<" "v"] [[2 3] [3 2]] ["<" "v"]
               [[2 3] [3 3]] ["v"] [[2 3] [4 2]] ["<" "v" "v"]
               [[2 3] [4 3]] ["v" "v"]

               [[3 1] [1 1]] ["^" "^"] [[3 1] [1 2]] ["^" "^" ">"]
               [[3 1] [1 3]] ["^" "^" ">" ">"] [[3 1] [2 1]] ["^"]
               [[3 1] [2 2]] ["^" ">"] [[3 1] [2 3]] ["^" ">" ">"]
               [[3 1] [3 1]] [] [[3 1] [3 2]] [">"]
               [[3 1] [3 3]] [">" ">"] [[3 1] [4 2]] [">" "v"]
               [[3 1] [4 3]] [">" ">" "v"]

               [[3 2] [1 1]] ["<" "^" "^"] [[3 2] [1 2]] ["^" "^"]
               [[3 2] [1 3]] ["^" "^" ">"] [[3 2] [2 1]] ["<" "^"]
               [[3 2] [2 2]] ["^"] [[3 2] [2 3]] ["^" ">"]
               [[3 2] [3 1]] ["<"] [[3 2] [3 2]] []
               [[3 2] [3 3]] [">"] [[3 2] [4 2]] ["v"]
               [[3 2] [4 3]] ["v" ">"]

               [[3 3] [1 1]] ["<" "<" "^" "^"] [[3 3] [1 2]] ["<" "^" "^"]
               [[3 3] [1 3]] ["^" "^"] [[3 3] [2 1]] ["<" "<" "^"]
               [[3 3] [2 2]] ["<" "^"] [[3 3] [2 3]] ["^"]
               [[3 3] [3 1]] ["<" "<"] [[3 3] [3 2]] ["<"]
               [[3 3] [3 3]] [] [[3 3] [4 2]] ["<" "v"]
               [[3 3] [4 3]] ["v"]

               [[4 2] [1 1]] ["^" "^" "^" "<"] [[4 2] [1 2]] ["^" "^" "^"]
               [[4 2] [1 3]] ["^" "^" "^" ">"] [[4 2] [2 1]] ["^" "^" "<"]
               [[4 2] [2 2]] ["^" "^"] [[4 2] [2 3]] ["^" "^" ">"]
               [[4 2] [3 1]] ["^" "<"] [[4 2] [3 2]] ["^"]
               [[4 2] [3 3]] ["^" ">"] [[4 2] [4 2]] []
               [[4 2] [4 3]] [">"]

               [[4 3] [1 1]] ["^" "^" "^" "<" "<"] [[4 3] [1 2]] ["<" "^" "^" "^"]
               [[4 3] [1 3]] ["^" "^" "^"] [[4 3] [2 1]] ["^" "^" "<" "<"]
               [[4 3] [2 2]] ["^" "^" "<"] [[4 3] [2 3]] ["^" "^"]
               [[4 3] [3 1]] ["^" "<" "<"] [[4 3] [3 2]] ["^" "<"]
               [[4 3] [3 3]] ["^"] [[4 3] [4 2]] ["<"]
               [[4 3] [4 3]] []})

(defn get-best-num [from to] (best-num [from to]))

(def best {[[1 3] [1 2]] ["<"] [[1 3] [2 3]] ["v"]
           [[1 3] [2 2]] ["<" "v"] [[1 3] [2 1]] ["v" "<" "<"]
           [[1 2] [1 3]] [">"] [[1 2] [2 3]] ["v" ">"]
           [[1 2] [2 2]] ["v"] [[1 2] [2 1]] ["v" "<"]
           [[2 1] [2 2]] [">"] [[2 1] [1 2]] [">" "^"]
           [[2 1] [2 3]] [">" ">"] [[2 1] [1 3]] [">" ">" "^"]
           [[2 2] [2 1]] ["<"] [[2 2] [2 3]] [">"]
           [[2 2] [1 2]] ["^"] [[2 2] [1 3]] ["^" ">"]
           [[2 3] [1 3]] ["^"] [[2 3] [1 2]] ["<" "^"]
           [[2 3] [2 2]] ["<"] [[2 3] [2 1]] ["<" "<"]})

(defn best-paths [from to] (if (= from to) [] (best [from to])))

(defn kv-to-vk [t] (->> (pairs t) (map (fn [[k v]] [v k])) from-pairs))

(def arrow-grid {[1 2] "^" [1 3] "A" [2 1] "<" [2 2] "v" [2 3] ">"})
(def arrow-grid-rev (kv-to-vk arrow-grid))

(def keypad-grid {[1 1] "7" [1 2] "8" [1 3] "9" [2 1] "4" [2 2] "5" [2 3] "6"
                  [3 1] "1" [3 2] "2" [3 3] "3" [4 2] "0" [4 3] "A"})

(def keypad-grid-rev (kv-to-vk keypad-grid))

(defn step [{:state {:a a :b b :c c} :length len} button]
  (let [reducer (fn [{:pos pos :path p} btn]
                  {:pos (arrow-grid-rev btn)
                   :path [;p ;(best-paths pos (arrow-grid-rev btn)) "A"]})
        arrow-1 [;(get-best-num a (keypad-grid-rev button)) "A"]
        arrow-2 (reduce reducer {:pos b :path []} arrow-1)
        arrow-3 (reduce reducer {:pos c :path []} (arrow-2 :path))]
    {:state {:a (keypad-grid-rev button) :b (arrow-2 :pos) :c (arrow-3 :pos)}
     :length (+ len (length (arrow-3 :path)))}))

(def default-state {:state {:a [4 3] :b [1 3] :c [1 3]} :length 0})

(defn numeric [buttons] (scan-number (string/trimr (string ;buttons) "A")))

(defn solve [input]
  (let [codes (peg/match parser input)
        p1 (map |[(numeric $) ((reduce step default-state $) :length)] codes)]
    (sum (map product p1))))


(defn main [&] (->> (file/read stdin :all) solve pp))
